class Vote < ActiveRecord::Base
  belongs_to  :user
  belongs_to  :voteable, polymorphic: true

  validates :user, presence: true

  def upvote(post_or_comment, post_or_comment_id)
    voteable_object = post_or_comment.class.find(post_or_comment_id)

    voteable_object.votes << self
  end

  def downvote(post_or_comment, post_or_comment_id)
    voteable_object = post_or_comment.class.find(post_or_comment_id)

    

  end
end

require 'rails_helper'

describe Vote do
  let(:vote) { Vote.new }
  
  let(:post) { Post.new }
  let(:current_user) { User.new }

  before do 
    allow(post).to receive(:id).and_return(1)
    allow(post).to receive(:user).and_return(current_user)
  end

  describe '#add_to' do
    it 'should add a vote to the passed in object' do
      expect{ post.votes << vote }.to change{ post.votes.length }.by(1)
    end
  end
end

$(document).ready(function(){

  $(".upvote").on("click", function(event){
    event.preventDefault();

    var url = $(this).parent().attr("action");
    var data = {
      id: $(this).parent().attr("id"),
      type: $(this).parent().attr("class")
    };

    $.ajax({
      url: url,
      method: "post",
      data: data,
      success: function(response){
        $(".upvote").css( { "color": "$upvote-color" } );
        $(".vote-number").css({ "color": "$upvote-color"});
        $(".vote-number").html(response);
      }
    });

  });

});

class CreateVotes < ActiveRecord::Migration
  def change
    create_table :votes do |t|
      t.belongs_to :user
      t.integer    :value, default: 0
      t.integer    :voteable_id
      t.string     :voteable_type

      t.timestamps
    end
  end
end


